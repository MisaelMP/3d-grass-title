name: Sync development into stable branch

on:
  push:
    branches: [development]
  workflow_dispatch: # Allow manual trigger

jobs:
  open-sync-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper branch comparison

      - name: Determine target branch
        id: target
        run: |
          # Check which stable branch exists (master or main)
          if git ls-remote --heads origin master | grep -q master; then
            echo "name=master" >> $GITHUB_OUTPUT
            echo "Using master as the stable branch"
          elif git ls-remote --heads origin main | grep -q main; then
            echo "name=main" >> $GITHUB_OUTPUT
            echo "Using main as the stable branch"
          else
            echo "name=" >> $GITHUB_OUTPUT
            echo "No master or main branch found, skipping"
          fi

      - name: Check for existing PR
        if: steps.target.outputs.name != ''
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_BRANCH="${{ steps.target.outputs.name }}"
          # Check if a PR already exists from development to target branch
          EXISTING_PR=$(gh pr list --base "$TARGET_BRANCH" --head development --state open --json number --jq '.[0].number' || echo "")

          if [ -n "$EXISTING_PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "Found existing PR #$EXISTING_PR"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing PR found"
          fi

      - name: Create Pull Request
        if: steps.target.outputs.name != '' && steps.check_pr.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_BRANCH="${{ steps.target.outputs.name }}"

          # Create PR using gh CLI
          gh pr create \
            --base "$TARGET_BRANCH" \
            --head development \
            --title "Sync development into $TARGET_BRANCH" \
            --body "This automated pull request keeps the stable branch aligned with the latest changes in development.

          - Review the diff to confirm that development is ready for release.
          - Merge the PR once validation has succeeded.

          Generated by the Sync development into stable branch workflow." || echo "Failed to create PR, it may already exist"
