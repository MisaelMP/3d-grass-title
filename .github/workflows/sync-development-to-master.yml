name: Sync development into stable branch

on:
  push:
    branches: [development]

jobs:
  open-sync-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Determine target branch
        id: target
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const candidates = ['master', 'main'];
            for (const branch of candidates) {
              try {
                await github.rest.repos.getBranch({ owner, repo, branch });
                core.setOutput('name', branch);
                core.info(`Using ${branch} as the stable branch.`);
                return;
              } catch (error) {
                if (error.status !== 404) throw error;
              }
            }
            core.warning('No master or main branch is available; skipping sync PR creation.');
            core.setOutput('name', '');

      - name: Open or reuse sync PR
        if: steps.target.outputs.name != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const base = '${{ steps.target.outputs.name }}';
            const head = 'development';
            const title = `Sync ${head} into ${base}`;
            const body = [
              'This automated pull request keeps the stable branch aligned with the latest changes in `development`.',
              '',
              '- Review the diff to confirm that development is ready for release.',
              '- Merge the PR once validation has succeeded.',
              '',
              '> Generated by the **Sync development into stable branch** workflow.'
            ].join('\n');

            try {
              const pr = await github.rest.pulls.create({ owner, repo, head, base, title, body });
              core.notice(`Opened PR #${pr.data.number} syncing ${head} into ${base}.`);
              return;
            } catch (error) {
              if (error.status === 422 && error.message && error.message.includes('A pull request already exists')) {
                core.info('A sync pull request already exists.');
                return;
              }
              throw error;
            }
